We intend to create a unique combinatinal project. The first, and main, component will be a multiplayer tank-style game in the terminal. It will be played 1-on-1 in a tournament style format and ideally people who are eliminated will be able to watch the games of those remaining. The largest issue we forsee would be dealing with synchronization across devices (ensuring that both players see the same screen), but that could be worked around by slowing down the pace of play. This will at least use threads, scheduling, and networking. 

The second component  will be in the background. When players join the network to play the tanks game in class, they'll be prompted to create a username and password. While the tournament is being played, each user's computer will be using the GPU to crack passwords in the background. Given the potential GPU speedup, the increased number of computers, and the theoretically decreased percentage of the searchspace required, we're optimistic about the relaxing of the constraints on passwords that we'll be able to allow and still crack. This would obvious use GPU Parallelism, syncronization, and networking.
